$_red:#cb1218;

$_white:#fff;
$_black:#323232;
$_gray:#ededed;
$_gray2:#707070;
$_aoi:#2c6977;
$_blue:#004763;
$_orange:#EF7E04;
$_deep_black:#101100;
$_radius:3px;


@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

$encoding-reference: (
  //('%','%25'),  // Encode "%" first, otherwise the "%" from encoded code would be encoded again (which would be bad)
  ('<','%3C'),
  ('>','%3E'),
  //('"','%22'),  // Replace " with ' because that's shorter than %22 and normally working
  ('"','\''),
  ('#','%23'),
  ('&','%26')
);
@function svg-encode($svg) {
  @each $char, $encoded in $encoding-reference {
    $svg: str-replace($svg, $char, $encoded);
  }
  @return 'data:image/svg+xml,' + $svg;
}
@function svg-social($fill-color) {
  @return '<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="-20 -20 64 64"><path fill="none" d="M0,0h24v24H0V0z"></path><path fill="' + $fill-color + '" d="M18,16.08c-0.76,0-1.439,0.3-1.96,0.77L8.91,12.7C8.96,12.47,9,12.24,9,12s-0.04-0.47-0.09-0.7l7.05-4.11 C16.5,7.69,17.21,8,18,8c1.66,0,3-1.34,3-3s-1.34-3-3-3s-3,1.34-3,3c0,0.24,0.04,0.47,0.09,0.7L8.04,9.81C7.5,9.31,6.79,9,6,9 c-1.66,0-3,1.34-3,3s1.34,3,3,3c0.79,0,1.5-0.311,2.04-0.811l7.12,4.16c-0.051,0.211-0.08,0.431-0.08,0.65 c0,1.609,1.311,2.92,2.92,2.92s2.92-1.311,2.92-2.92S19.609,16.08,18,16.08z"></path></svg>';
}